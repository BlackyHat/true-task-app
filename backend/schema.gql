# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""The Categories object"""
type CategoryEntity {
  dateCreated: DateTime!
  id: ID!
  name: String!
  tasks: TaskEntity
  user: UserEntity!
}

input CreateCategoryInput {
  name: String!
}

input CreateTaskInput {
  categoryId: Float!
  dateEnd: String!
  dateStart: String!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The Login object"""
type LoginResponse {
  token: String!
  user: UserEntity!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  addCategory(createCategory: CreateCategoryInput!): CategoryEntity!
  addTask(createTask: CreateTaskInput!): TaskEntity!
  deleteCategory(categoryId: Float!): Float!
  deleteTask(categoryId: Float!, taskId: Float!): Float!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  register(registerUserInput: RegisterUserInput!): RegisterResponse!
  updateCategory(updateCategory: UpdateCategoryInput!): CategoryEntity!
  updateTask(categoryId: Float!, updateTask: UpdateTaskInput!): TaskEntity!
}

type Query {
  allCategories: [CategoryEntity!]!
  allTasks(categoryId: Float!): [TaskEntity!]!
  categoryById(categoryId: Float!): CategoryEntity!
  profile: UserEntity!
  taskById(categoryId: Float!, taskId: Float!): TaskEntity!
}

type RegisterResponse {
  token: String!
  user: UserEntity!
}

input RegisterUserInput {
  email: String!
  password: String!
  role: String
}

"""The Tasks object"""
type TaskEntity {
  category: CategoryEntity!
  dateEnd: DateTime!
  dateStart: DateTime!
  id: ID!
  name: String!
  user: UserEntity!
}

input UpdateCategoryInput {
  id: ID!
  name: String!
}

input UpdateTaskInput {
  dateEnd: String
  dateStart: String
  id: ID!
  name: String
}

"""The Users object"""
type UserEntity {
  categories: CategoryEntity!
  email: String!
  id: ID!
  password: String!
  role: userRoles
  tasks: TaskEntity!
}

enum userRoles {
  ADMIN
  USER
}