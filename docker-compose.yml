version: '3.8'
services:
  db:
    container_name: postgres-db
    image: postgres:alpine
    restart: always
    ports:
      - ${TYPEORM_PORT}:${TYPEORM_PORT}
    environment:
      - POSTGRES_USER=${TYPEORM_USERNAME}
      - POSTGRES_PASSWORD=${TYPEORM_PASSWORD}
      - POSTGRES_DB=${TYPEORM_DATABASE}
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  backend:
    container_name: backend-true-test
    build:
      context: ./backend
    depends_on:
      - db
    restart: unless-stopped
    ports:
      - '${API_PORT}:3001'
    environment:
      - API_PORT=${API_PORT}
      - TYPEORM_USERNAME=${TYPEORM_USERNAME}
      - TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
      - TYPEORM_DATABASE=${TYPEORM_DATABASE}
      - TYPEORM_PORT=${TYPEORM_PORT}
      - TYPEORM_HOST=db
      - JWT_SECRET=${JWT_SECRET}

  frontend:
    stdin_open: true
    build:
      context: ./frontend
    restart: unless-stopped
    ports: -'3000:3000'
    volumes:
      - './:/app'
      - '/app/node_modules'
    # volumes:
    #   - /app/node_modules
    #   - ./frontend:/app

  # frontend:
  #   container_name: reactapp-true-ts
  #   image: node:alpine
  #   # entrypoint: /bin/sh
  #   stdin_open: true
  #   build:
  #     context: ./frontend
  #     #  dockerfile: Dockerfile.dev
  #   ports:
  #     - '3000:3000'
  #   working_dir: /srv/app
  # volumes:
  #       - ./src:/app/src
  #   # volumes:
  #   #   - '/app/node_modules'
  #   #   - './:/app'
  #   # volumes:
  #   #     - type: bind
  #   #       source: ./
  #   #       target: /srv/app
  #   #   tty: true
